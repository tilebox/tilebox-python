# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from tilebox.datasets.datasetsv1 import data_ingestion_pb2 as datasets_dot_v1_dot_data__ingestion__pb2


class DataIngestionServiceStub(object):
    """DataIngestionService provides data ingestion and deletion capabilities for Tilebox datasets.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IngestDatapoints = channel.unary_unary(
                '/datasets.v1.DataIngestionService/IngestDatapoints',
                request_serializer=datasets_dot_v1_dot_data__ingestion__pb2.IngestDatapointsRequest.SerializeToString,
                response_deserializer=datasets_dot_v1_dot_data__ingestion__pb2.IngestDatapointsResponse.FromString,
                _registered_method=True)
        self.DeleteDatapoints = channel.unary_unary(
                '/datasets.v1.DataIngestionService/DeleteDatapoints',
                request_serializer=datasets_dot_v1_dot_data__ingestion__pb2.DeleteDatapointsRequest.SerializeToString,
                response_deserializer=datasets_dot_v1_dot_data__ingestion__pb2.DeleteDatapointsResponse.FromString,
                _registered_method=True)


class DataIngestionServiceServicer(object):
    """DataIngestionService provides data ingestion and deletion capabilities for Tilebox datasets.
    """

    def IngestDatapoints(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDatapoints(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataIngestionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IngestDatapoints': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestDatapoints,
                    request_deserializer=datasets_dot_v1_dot_data__ingestion__pb2.IngestDatapointsRequest.FromString,
                    response_serializer=datasets_dot_v1_dot_data__ingestion__pb2.IngestDatapointsResponse.SerializeToString,
            ),
            'DeleteDatapoints': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDatapoints,
                    request_deserializer=datasets_dot_v1_dot_data__ingestion__pb2.DeleteDatapointsRequest.FromString,
                    response_serializer=datasets_dot_v1_dot_data__ingestion__pb2.DeleteDatapointsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'datasets.v1.DataIngestionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('datasets.v1.DataIngestionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataIngestionService(object):
    """DataIngestionService provides data ingestion and deletion capabilities for Tilebox datasets.
    """

    @staticmethod
    def IngestDatapoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datasets.v1.DataIngestionService/IngestDatapoints',
            datasets_dot_v1_dot_data__ingestion__pb2.IngestDatapointsRequest.SerializeToString,
            datasets_dot_v1_dot_data__ingestion__pb2.IngestDatapointsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteDatapoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datasets.v1.DataIngestionService/DeleteDatapoints',
            datasets_dot_v1_dot_data__ingestion__pb2.DeleteDatapointsRequest.SerializeToString,
            datasets_dot_v1_dot_data__ingestion__pb2.DeleteDatapointsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
