# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from tilebox.datasets.datasetsv1 import core_pb2 as datasets_dot_v1_dot_core__pb2
from tilebox.datasets.datasetsv1 import datasets_pb2 as datasets_dot_v1_dot_datasets__pb2


class DatasetServiceStub(object):
    """DatasetsService is the CRUD service for Tilebox datasets.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateDataset = channel.unary_unary(
                '/datasets.v1.DatasetService/CreateDataset',
                request_serializer=datasets_dot_v1_dot_datasets__pb2.CreateDatasetRequest.SerializeToString,
                response_deserializer=datasets_dot_v1_dot_core__pb2.Dataset.FromString,
                _registered_method=True)
        self.GetDataset = channel.unary_unary(
                '/datasets.v1.DatasetService/GetDataset',
                request_serializer=datasets_dot_v1_dot_datasets__pb2.GetDatasetRequest.SerializeToString,
                response_deserializer=datasets_dot_v1_dot_core__pb2.Dataset.FromString,
                _registered_method=True)
        self.UpdateDataset = channel.unary_unary(
                '/datasets.v1.DatasetService/UpdateDataset',
                request_serializer=datasets_dot_v1_dot_datasets__pb2.UpdateDatasetRequest.SerializeToString,
                response_deserializer=datasets_dot_v1_dot_core__pb2.Dataset.FromString,
                _registered_method=True)
        self.UpdateDatasetDescription = channel.unary_unary(
                '/datasets.v1.DatasetService/UpdateDatasetDescription',
                request_serializer=datasets_dot_v1_dot_datasets__pb2.UpdateDatasetDescriptionRequest.SerializeToString,
                response_deserializer=datasets_dot_v1_dot_core__pb2.Dataset.FromString,
                _registered_method=True)
        self.ListDatasets = channel.unary_unary(
                '/datasets.v1.DatasetService/ListDatasets',
                request_serializer=datasets_dot_v1_dot_datasets__pb2.ListDatasetsRequest.SerializeToString,
                response_deserializer=datasets_dot_v1_dot_datasets__pb2.ListDatasetsResponse.FromString,
                _registered_method=True)


class DatasetServiceServicer(object):
    """DatasetsService is the CRUD service for Tilebox datasets.
    """

    def CreateDataset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDataset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDatasetDescription(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDatasets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatasetServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateDataset': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDataset,
                    request_deserializer=datasets_dot_v1_dot_datasets__pb2.CreateDatasetRequest.FromString,
                    response_serializer=datasets_dot_v1_dot_core__pb2.Dataset.SerializeToString,
            ),
            'GetDataset': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataset,
                    request_deserializer=datasets_dot_v1_dot_datasets__pb2.GetDatasetRequest.FromString,
                    response_serializer=datasets_dot_v1_dot_core__pb2.Dataset.SerializeToString,
            ),
            'UpdateDataset': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDataset,
                    request_deserializer=datasets_dot_v1_dot_datasets__pb2.UpdateDatasetRequest.FromString,
                    response_serializer=datasets_dot_v1_dot_core__pb2.Dataset.SerializeToString,
            ),
            'UpdateDatasetDescription': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDatasetDescription,
                    request_deserializer=datasets_dot_v1_dot_datasets__pb2.UpdateDatasetDescriptionRequest.FromString,
                    response_serializer=datasets_dot_v1_dot_core__pb2.Dataset.SerializeToString,
            ),
            'ListDatasets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDatasets,
                    request_deserializer=datasets_dot_v1_dot_datasets__pb2.ListDatasetsRequest.FromString,
                    response_serializer=datasets_dot_v1_dot_datasets__pb2.ListDatasetsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'datasets.v1.DatasetService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('datasets.v1.DatasetService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DatasetService(object):
    """DatasetsService is the CRUD service for Tilebox datasets.
    """

    @staticmethod
    def CreateDataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datasets.v1.DatasetService/CreateDataset',
            datasets_dot_v1_dot_datasets__pb2.CreateDatasetRequest.SerializeToString,
            datasets_dot_v1_dot_core__pb2.Dataset.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datasets.v1.DatasetService/GetDataset',
            datasets_dot_v1_dot_datasets__pb2.GetDatasetRequest.SerializeToString,
            datasets_dot_v1_dot_core__pb2.Dataset.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datasets.v1.DatasetService/UpdateDataset',
            datasets_dot_v1_dot_datasets__pb2.UpdateDatasetRequest.SerializeToString,
            datasets_dot_v1_dot_core__pb2.Dataset.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDatasetDescription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datasets.v1.DatasetService/UpdateDatasetDescription',
            datasets_dot_v1_dot_datasets__pb2.UpdateDatasetDescriptionRequest.SerializeToString,
            datasets_dot_v1_dot_core__pb2.Dataset.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDatasets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datasets.v1.DatasetService/ListDatasets',
            datasets_dot_v1_dot_datasets__pb2.ListDatasetsRequest.SerializeToString,
            datasets_dot_v1_dot_datasets__pb2.ListDatasetsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
