# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from tilebox.datasets.datasetsv1 import collections_pb2 as datasets_dot_v1_dot_collections__pb2
from tilebox.datasets.datasetsv1 import core_pb2 as datasets_dot_v1_dot_core__pb2


class CollectionServiceStub(object):
    """CollectionService is the service definition for the Tilebox datasets service, which provides access to datasets
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCollection = channel.unary_unary(
                '/datasets.v1.CollectionService/CreateCollection',
                request_serializer=datasets_dot_v1_dot_collections__pb2.CreateCollectionRequest.SerializeToString,
                response_deserializer=datasets_dot_v1_dot_core__pb2.CollectionInfo.FromString,
                _registered_method=True)
        self.GetCollectionByName = channel.unary_unary(
                '/datasets.v1.CollectionService/GetCollectionByName',
                request_serializer=datasets_dot_v1_dot_collections__pb2.GetCollectionByNameRequest.SerializeToString,
                response_deserializer=datasets_dot_v1_dot_core__pb2.CollectionInfo.FromString,
                _registered_method=True)
        self.ListCollections = channel.unary_unary(
                '/datasets.v1.CollectionService/ListCollections',
                request_serializer=datasets_dot_v1_dot_collections__pb2.ListCollectionsRequest.SerializeToString,
                response_deserializer=datasets_dot_v1_dot_core__pb2.CollectionInfos.FromString,
                _registered_method=True)


class CollectionServiceServicer(object):
    """CollectionService is the service definition for the Tilebox datasets service, which provides access to datasets
    """

    def CreateCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCollectionByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCollections(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CollectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCollection,
                    request_deserializer=datasets_dot_v1_dot_collections__pb2.CreateCollectionRequest.FromString,
                    response_serializer=datasets_dot_v1_dot_core__pb2.CollectionInfo.SerializeToString,
            ),
            'GetCollectionByName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCollectionByName,
                    request_deserializer=datasets_dot_v1_dot_collections__pb2.GetCollectionByNameRequest.FromString,
                    response_serializer=datasets_dot_v1_dot_core__pb2.CollectionInfo.SerializeToString,
            ),
            'ListCollections': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCollections,
                    request_deserializer=datasets_dot_v1_dot_collections__pb2.ListCollectionsRequest.FromString,
                    response_serializer=datasets_dot_v1_dot_core__pb2.CollectionInfos.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'datasets.v1.CollectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('datasets.v1.CollectionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CollectionService(object):
    """CollectionService is the service definition for the Tilebox datasets service, which provides access to datasets
    """

    @staticmethod
    def CreateCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datasets.v1.CollectionService/CreateCollection',
            datasets_dot_v1_dot_collections__pb2.CreateCollectionRequest.SerializeToString,
            datasets_dot_v1_dot_core__pb2.CollectionInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCollectionByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datasets.v1.CollectionService/GetCollectionByName',
            datasets_dot_v1_dot_collections__pb2.GetCollectionByNameRequest.SerializeToString,
            datasets_dot_v1_dot_core__pb2.CollectionInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCollections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datasets.v1.CollectionService/ListCollections',
            datasets_dot_v1_dot_collections__pb2.ListCollectionsRequest.SerializeToString,
            datasets_dot_v1_dot_core__pb2.CollectionInfos.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
