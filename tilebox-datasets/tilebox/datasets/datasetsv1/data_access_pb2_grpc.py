# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from tilebox.datasets.datasetsv1 import core_pb2 as datasets_dot_v1_dot_core__pb2
from tilebox.datasets.datasetsv1 import data_access_pb2 as datasets_dot_v1_dot_data__access__pb2


class DataAccessServiceStub(object):
    """DataAccessService provides data access and querying capabilities for Tilebox datasets.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDatasetForInterval = channel.unary_unary(
                '/datasets.v1.DataAccessService/GetDatasetForInterval',
                request_serializer=datasets_dot_v1_dot_data__access__pb2.GetDatasetForIntervalRequest.SerializeToString,
                response_deserializer=datasets_dot_v1_dot_core__pb2.DatapointPage.FromString,
                _registered_method=True)
        self.GetDatapointByID = channel.unary_unary(
                '/datasets.v1.DataAccessService/GetDatapointByID',
                request_serializer=datasets_dot_v1_dot_data__access__pb2.GetDatapointByIdRequest.SerializeToString,
                response_deserializer=datasets_dot_v1_dot_core__pb2.Datapoint.FromString,
                _registered_method=True)


class DataAccessServiceServicer(object):
    """DataAccessService provides data access and querying capabilities for Tilebox datasets.
    """

    def GetDatasetForInterval(self, request, context):
        """GetDatasetForInterval returns a list of data points for a given time interval and collection.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDatapointByID(self, request, context):
        """GetDatapointByID returns a single datapoint by its ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataAccessServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDatasetForInterval': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDatasetForInterval,
                    request_deserializer=datasets_dot_v1_dot_data__access__pb2.GetDatasetForIntervalRequest.FromString,
                    response_serializer=datasets_dot_v1_dot_core__pb2.DatapointPage.SerializeToString,
            ),
            'GetDatapointByID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDatapointByID,
                    request_deserializer=datasets_dot_v1_dot_data__access__pb2.GetDatapointByIdRequest.FromString,
                    response_serializer=datasets_dot_v1_dot_core__pb2.Datapoint.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'datasets.v1.DataAccessService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('datasets.v1.DataAccessService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataAccessService(object):
    """DataAccessService provides data access and querying capabilities for Tilebox datasets.
    """

    @staticmethod
    def GetDatasetForInterval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datasets.v1.DataAccessService/GetDatasetForInterval',
            datasets_dot_v1_dot_data__access__pb2.GetDatasetForIntervalRequest.SerializeToString,
            datasets_dot_v1_dot_core__pb2.DatapointPage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDatapointByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datasets.v1.DataAccessService/GetDatapointByID',
            datasets_dot_v1_dot_data__access__pb2.GetDatapointByIdRequest.SerializeToString,
            datasets_dot_v1_dot_core__pb2.Datapoint.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
