# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from tilebox.workflows.workflowsv1 import core_pb2 as workflows_dot_v1_dot_core__pb2
from tilebox.workflows.workflowsv1 import recurrent_task_pb2 as workflows_dot_v1_dot_recurrent__task__pb2


class RecurrentTaskServiceStub(object):
    """RecurrentTaskService is a service for managing recurrent tasks. Currently, we support two types of triggers for
    recurrent tasks:
    - Bucket triggers, which triggers tasks when an object is uploaded to a storage bucket that matches a glob pattern
    - Cron triggers, which triggers tasks on a schedule
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListStorageLocations = channel.unary_unary(
                '/workflows.v1.RecurrentTaskService/ListStorageLocations',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=workflows_dot_v1_dot_recurrent__task__pb2.StorageLocations.FromString,
                _registered_method=True)
        self.GetStorageLocation = channel.unary_unary(
                '/workflows.v1.RecurrentTaskService/GetStorageLocation',
                request_serializer=workflows_dot_v1_dot_core__pb2.UUID.SerializeToString,
                response_deserializer=workflows_dot_v1_dot_recurrent__task__pb2.StorageLocation.FromString,
                _registered_method=True)
        self.CreateStorageLocation = channel.unary_unary(
                '/workflows.v1.RecurrentTaskService/CreateStorageLocation',
                request_serializer=workflows_dot_v1_dot_recurrent__task__pb2.StorageLocation.SerializeToString,
                response_deserializer=workflows_dot_v1_dot_recurrent__task__pb2.StorageLocation.FromString,
                _registered_method=True)
        self.DeleteStorageLocation = channel.unary_unary(
                '/workflows.v1.RecurrentTaskService/DeleteStorageLocation',
                request_serializer=workflows_dot_v1_dot_core__pb2.UUID.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ListRecurrentTasks = channel.unary_unary(
                '/workflows.v1.RecurrentTaskService/ListRecurrentTasks',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=workflows_dot_v1_dot_recurrent__task__pb2.RecurrentTasks.FromString,
                _registered_method=True)
        self.GetRecurrentTask = channel.unary_unary(
                '/workflows.v1.RecurrentTaskService/GetRecurrentTask',
                request_serializer=workflows_dot_v1_dot_core__pb2.UUID.SerializeToString,
                response_deserializer=workflows_dot_v1_dot_recurrent__task__pb2.RecurrentTaskPrototype.FromString,
                _registered_method=True)
        self.CreateRecurrentTask = channel.unary_unary(
                '/workflows.v1.RecurrentTaskService/CreateRecurrentTask',
                request_serializer=workflows_dot_v1_dot_recurrent__task__pb2.RecurrentTaskPrototype.SerializeToString,
                response_deserializer=workflows_dot_v1_dot_recurrent__task__pb2.RecurrentTaskPrototype.FromString,
                _registered_method=True)
        self.UpdateRecurrentTask = channel.unary_unary(
                '/workflows.v1.RecurrentTaskService/UpdateRecurrentTask',
                request_serializer=workflows_dot_v1_dot_recurrent__task__pb2.RecurrentTaskPrototype.SerializeToString,
                response_deserializer=workflows_dot_v1_dot_recurrent__task__pb2.RecurrentTaskPrototype.FromString,
                _registered_method=True)
        self.DeleteRecurrentTask = channel.unary_unary(
                '/workflows.v1.RecurrentTaskService/DeleteRecurrentTask',
                request_serializer=workflows_dot_v1_dot_core__pb2.UUID.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class RecurrentTaskServiceServicer(object):
    """RecurrentTaskService is a service for managing recurrent tasks. Currently, we support two types of triggers for
    recurrent tasks:
    - Bucket triggers, which triggers tasks when an object is uploaded to a storage bucket that matches a glob pattern
    - Cron triggers, which triggers tasks on a schedule
    """

    def ListStorageLocations(self, request, context):
        """ListStorageLocations lists all the storage buckets that are available for use as bucket triggers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStorageLocation(self, request, context):
        """GetStorageLocation gets a storage location by its ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateStorageLocation(self, request, context):
        """CreateStorageLocation creates a new storage bucket.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteStorageLocation(self, request, context):
        """DeleteStorageLocation deletes a storage location.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRecurrentTasks(self, request, context):
        """ListRecurrentTasks lists all the recurrent tasks that are currently registered in a namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRecurrentTask(self, request, context):
        """GetRecurrentTask gets a recurrent task by its ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRecurrentTask(self, request, context):
        """CreateRecurrentTask creates a new recurrent task in a namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRecurrentTask(self, request, context):
        """UpdateRecurrentTask updates a recurrent task in a namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRecurrentTask(self, request, context):
        """DeleteRecurrentTask deletes a recurrent task from a namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecurrentTaskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListStorageLocations': grpc.unary_unary_rpc_method_handler(
                    servicer.ListStorageLocations,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=workflows_dot_v1_dot_recurrent__task__pb2.StorageLocations.SerializeToString,
            ),
            'GetStorageLocation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStorageLocation,
                    request_deserializer=workflows_dot_v1_dot_core__pb2.UUID.FromString,
                    response_serializer=workflows_dot_v1_dot_recurrent__task__pb2.StorageLocation.SerializeToString,
            ),
            'CreateStorageLocation': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateStorageLocation,
                    request_deserializer=workflows_dot_v1_dot_recurrent__task__pb2.StorageLocation.FromString,
                    response_serializer=workflows_dot_v1_dot_recurrent__task__pb2.StorageLocation.SerializeToString,
            ),
            'DeleteStorageLocation': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteStorageLocation,
                    request_deserializer=workflows_dot_v1_dot_core__pb2.UUID.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListRecurrentTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRecurrentTasks,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=workflows_dot_v1_dot_recurrent__task__pb2.RecurrentTasks.SerializeToString,
            ),
            'GetRecurrentTask': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecurrentTask,
                    request_deserializer=workflows_dot_v1_dot_core__pb2.UUID.FromString,
                    response_serializer=workflows_dot_v1_dot_recurrent__task__pb2.RecurrentTaskPrototype.SerializeToString,
            ),
            'CreateRecurrentTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRecurrentTask,
                    request_deserializer=workflows_dot_v1_dot_recurrent__task__pb2.RecurrentTaskPrototype.FromString,
                    response_serializer=workflows_dot_v1_dot_recurrent__task__pb2.RecurrentTaskPrototype.SerializeToString,
            ),
            'UpdateRecurrentTask': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRecurrentTask,
                    request_deserializer=workflows_dot_v1_dot_recurrent__task__pb2.RecurrentTaskPrototype.FromString,
                    response_serializer=workflows_dot_v1_dot_recurrent__task__pb2.RecurrentTaskPrototype.SerializeToString,
            ),
            'DeleteRecurrentTask': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRecurrentTask,
                    request_deserializer=workflows_dot_v1_dot_core__pb2.UUID.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'workflows.v1.RecurrentTaskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('workflows.v1.RecurrentTaskService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RecurrentTaskService(object):
    """RecurrentTaskService is a service for managing recurrent tasks. Currently, we support two types of triggers for
    recurrent tasks:
    - Bucket triggers, which triggers tasks when an object is uploaded to a storage bucket that matches a glob pattern
    - Cron triggers, which triggers tasks on a schedule
    """

    @staticmethod
    def ListStorageLocations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workflows.v1.RecurrentTaskService/ListStorageLocations',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            workflows_dot_v1_dot_recurrent__task__pb2.StorageLocations.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStorageLocation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workflows.v1.RecurrentTaskService/GetStorageLocation',
            workflows_dot_v1_dot_core__pb2.UUID.SerializeToString,
            workflows_dot_v1_dot_recurrent__task__pb2.StorageLocation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateStorageLocation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workflows.v1.RecurrentTaskService/CreateStorageLocation',
            workflows_dot_v1_dot_recurrent__task__pb2.StorageLocation.SerializeToString,
            workflows_dot_v1_dot_recurrent__task__pb2.StorageLocation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteStorageLocation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workflows.v1.RecurrentTaskService/DeleteStorageLocation',
            workflows_dot_v1_dot_core__pb2.UUID.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListRecurrentTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workflows.v1.RecurrentTaskService/ListRecurrentTasks',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            workflows_dot_v1_dot_recurrent__task__pb2.RecurrentTasks.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRecurrentTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workflows.v1.RecurrentTaskService/GetRecurrentTask',
            workflows_dot_v1_dot_core__pb2.UUID.SerializeToString,
            workflows_dot_v1_dot_recurrent__task__pb2.RecurrentTaskPrototype.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateRecurrentTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workflows.v1.RecurrentTaskService/CreateRecurrentTask',
            workflows_dot_v1_dot_recurrent__task__pb2.RecurrentTaskPrototype.SerializeToString,
            workflows_dot_v1_dot_recurrent__task__pb2.RecurrentTaskPrototype.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateRecurrentTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workflows.v1.RecurrentTaskService/UpdateRecurrentTask',
            workflows_dot_v1_dot_recurrent__task__pb2.RecurrentTaskPrototype.SerializeToString,
            workflows_dot_v1_dot_recurrent__task__pb2.RecurrentTaskPrototype.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteRecurrentTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workflows.v1.RecurrentTaskService/DeleteRecurrentTask',
            workflows_dot_v1_dot_core__pb2.UUID.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
